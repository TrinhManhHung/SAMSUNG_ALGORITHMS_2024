//https://oj.vnoi.info/problem/segtree_itmix

#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define ll long long
#define fi first
#define se second
#define sz size()
#define pb push_back
#define vi vector<int>
#define vll vector<ll>
#define vvi vector<vector<int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define FOR(i, a, b) for(int i =a; i <=b; i++)
#define FOD(i, a, b) for(int i =a; i >=b; i--)
#define INF LLONG_MAX
#define MASK(i) (1LL << (i))
#define BIT(x, i) (((x) >> (i)) & 1)
#define COUNT_ONE(x) __builtin_popcountll((x))
#define COUNT_LEAD_ZERO(x) __builtin_clzll((x))
#define COUNT_TRAIL_ZERO(x) __builtin_ctzll((x))
#define SHOW1(x) cout << #x << " = " << (x) << endl << flush
#define SHOW2(x, y) cout << #x << "=" << (x) << " " << #y << "=" << (y) << endl << flush
#define faster() ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
const int maxn = 300000;
const int MOD = 1000000007;

ll add(ll a, ll b){
	return (a + b) % MOD;
}

ll mul(ll a, ll b){
	return (a % MOD * b % MOD) % MOD;
}

struct SegmentTree{
	int n;
	vll sum, lazy_mul, lazy_add, lazy_assign;
	
	SegmentTree(int _n){
		n = _n;
		sum.assign(4*n+5, 0);
		lazy_mul.assign(4*n+5, 1);
		lazy_add.assign(4*n+5, 0);
		lazy_assign.assign(4*n+5, -1);
	}
	
	void pushDown(int id, int tl, int tr){
        sum[id] = add(mul(sum[id], lazy_mul[id]), mul(lazy_add[id], (tr - tl + 1)));

        if(tl != tr){
            int left = 2 * id, right = 2 * id + 1;

            lazy_mul[left] = mul(lazy_mul[left], lazy_mul[id]);
            lazy_mul[right] = mul(lazy_mul[right], lazy_mul[id]);

            lazy_add[left] = add(mul(lazy_add[left], lazy_mul[id]), lazy_add[id]);
            lazy_add[right] = add(mul(lazy_add[right], lazy_mul[id]), lazy_add[id]);
        }

        lazy_assign[id] = -1;
        lazy_mul[id] = 1;
        lazy_add[id] = 0;
    }


    void update(int id, int tl, int tr, int l, int r, ll val,int type){
        pushDown(id, tl, tr);

        if(tl > r || tr < l) return;

        if(l <= tl && tr <= r){
            int len = tr - tl + 1;

            //assign
            if(type == 3){
                lazy_assign[id] = val;

                lazy_mul[id] = 0;
                lazy_add[id] = val;
            } 

            //mul
            else if(type == 2){
                lazy_mul[id] = mul(lazy_mul[id], val);

                lazy_add[id] = mul(lazy_add[id], val);
            }
            
            //add
            else if(type == 1){
                lazy_add[id] = add(lazy_add[id], val);
            }
                
            pushDown(id, tl, tr);
            return;
        }

        int mid = (tl + tr) >> 1;

        update(2*id, tl, mid, l, r, val, type);
        update(2*id+1, mid+1, tr, l, r, val, type);

        sum[id] = add(sum[2*id], sum[2*id + 1]);
    }

    ll getSum(int id, int tl, int tr, int l, int r){
        pushDown(id, tl, tr);
        if(tl > r || tr < l) return 0ll;

        if(l <= tl && tr <= r) return sum[id];

        int mid = (tl + tr) >> 1;

        ll sumLeft = getSum(2*id, tl, mid, l, r);
        ll sumRight = getSum(2*id+1, mid+1, tr, l, r);

        ll allSum = add(sumLeft, sumRight);
        return allSum;
    }
};

void solve(){

	int n, m; cin >> n >> m;
	ll a[n+5];

    SegmentTree seg(n);
	FOR(i, 1, n){
		cin >> a[i];
		seg.update(1, 1, n, i, i, a[i], 3);
	}
	
	while(m--){
		int type, L, R; cin >> type >> L >> R;
		if(type <= 3){
			int x; cin >> x;
			seg.update(1, 1, n, L, R, x, type);
		}
		else{ 
            // cout << 2222 << endl;
            cout << seg.getSum(1, 1, n, L, R) << endl;
        }
		
	}
}

int main(){
    faster();
    int t = 1;
//    cin >> t;
    while(t--){
        solve();
    }
    return 0;
}

/** HungLam
	  (\(\
	 ( 0.0)
	o_(")(")
**/
/**
⣿⣛⢿⣛⢿⡙⣏⢻⡙⠏⠭⣉⠇⡹⢌⡣⡍⢭⠩⢥⢩⢡⡉⡜⣩⠈⠥⡉⢌⠡⡉⠎⡍⢭⠩⢍⠩⢯⠹⣍⢯⡙⢭⢫⡝⣭⠩⡉⢍⠩⡉⢍⡉⢣⠙⡌⢣⠉⢎⡝⢬⢣⡝⣬⢍⡭⣩⡙⣍⣋⡝⢣⠛⠬⢡⠉⠬⡑⢫⢻⡹⣍⡛⢿⣿⡏⠥⡉⢌⠡
⣷⣫⢾⡹⢮⡽⡘⢡⠘⣌⠲⣄⢺⡵⣋⠷⣹⢎⡗⣆⠒⡂⠖⠬⠤⡙⠤⡑⢌⠢⡑⢊⡜⢢⡝⢦⠳⣤⢣⠴⣠⢌⣄⢢⡑⡠⢃⠜⡠⢃⠜⡠⠘⡄⢣⠘⠤⣉⣦⢞⣭⣣⣼⡴⣎⣶⣥⣽⣦⣷⣼⢧⣛⣤⢂⠍⠤⡁⢎⡡⢓⠬⡙⢎⠳⢋⢦⠱⣌⢂
⣷⣫⢿⡝⣧⡓⣌⢡⠋⡔⢣⢎⡷⣱⡙⢮⠵⣎⠽⣎⠳⣌⠘⡄⢣⠘⠤⡑⢌⠢⣁⠣⡜⡡⠞⡥⢛⡔⢫⠞⡱⢎⡜⣣⢝⡱⣋⠞⡡⢊⠔⡡⢃⠜⣠⡿⣞⣿⡾⣿⢿⣿⣿⣽⣿⣿⢿⣟⣿⡽⣯⢿⣯⣟⡯⣞⠤⡑⢌⡒⢏⠶⡹⢎⠷⣊⢶⠡⢆⠂
⣿⡭⣗⡻⣞⠽⣈⢇⡛⡜⢣⢏⠶⣡⠏⣝⠺⣌⠳⣜⢣⡜⣰⠘⡤⣉⠆⡱⢈⠒⡄⠳⡐⢥⢫⡔⢣⠜⣥⢮⡵⣎⣴⡡⢎⡱⢡⠊⡔⢡⠊⣔⣥⣾⢿⣹⣽⣶⢿⣽⡾⣷⣿⣿⣿⣻⡿⣯⢿⡽⣯⣟⡾⣽⣻⡽⣾⣑⠪⡔⢪⡒⣥⢊⢦⡡⢎⡲⢈⠆
⣯⢳⡽⣫⣝⠲⠠⠎⡴⣉⠶⣈⠧⣡⢋⠬⡓⣌⠳⣌⠣⡜⣡⠛⡴⢉⠆⡱⢈⠒⡌⠣⡍⢆⡻⣜⢧⣛⡬⢷⢻⡽⣞⡽⣳⣌⢣⡙⣄⢣⣼⣟⣷⣯⣿⣿⣿⣾⣯⣷⣿⣿⣽⣯⣟⠿⣽⢏⣿⣱⢳⢮⢽⡘⢧⣻⡱⢻⢧⡙⢦⣡⢁⢎⡐⢩⠘⡄⠣⠌
⣯⢳⡽⣱⢏⣇⢣⠚⡴⣡⢾⣷⣿⣶⣿⣾⣷⣬⣷⣌⠳⡘⢤⢋⠴⡁⢎⠰⡁⢎⡐⢣⠜⡢⢝⣮⢳⣹⣾⣶⣦⣶⣤⣦⣥⣬⣡⣃⢬⣿⣿⣾⣿⣿⣿⣿⣿⡿⠿⠻⠟⠿⠿⢿⣿⣿⡽⣞⡷⣯⣟⣾⣳⣟⣧⢷⣹⢧⣯⡝⡦⢹⢎⠮⣙⠧⣛⠜⡱⢈
⡷⣏⠷⣭⢚⡬⢣⢏⠶⣡⢟⡼⣳⣟⣾⣽⣯⢿⣿⣿⢡⡙⢆⡑⢪⠐⡌⢢⠑⢢⠘⠤⢊⡕⢺⡜⣧⢏⡷⣭⢯⡝⣯⡝⢯⡻⡝⣱⣿⣿⣿⣿⣿⣿⣿⣿⠣⠐⡁⠂⠌⡐⢀⠂⡘⢿⣟⣯⣟⣷⣻⣞⣷⣻⣞⣯⣟⡿⣾⣽⣳⡅⢺⢦⡱⣎⡔⢣⠔⡡
⢝⡾⣹⢎⡳⣚⠵⣊⢿⡱⢎⢷⣻⡾⣽⡾⣯⣻⣿⣿⢠⡙⠦⣙⢢⠑⡌⢢⠉⢆⡉⢆⠣⡘⢥⣛⢾⣿⢿⡿⣿⣿⣳⡽⣣⢗⣸⣿⣿⣿⣿⣿⣿⣿⣿⠃⠄⠡⢀⠁⢂⠐⡀⢂⠐⡘⣿⢿⣞⣯⣷⣻⣞⣷⣻⢾⣽⣻⢷⣯⢷⣏⡆⢯⠱⣋⢞⡳⢎⡵
⢎⡷⣣⢞⡱⢫⡜⣡⣏⢷⣩⢺⣵⡿⣯⢿⣳⡽⣷⣿⢠⡙⢢⡑⢪⠐⡌⢢⠉⢆⡘⢄⠣⡑⢦⡙⣾⣿⢯⣟⡷⣿⣻⡵⣋⠦⣿⣿⣿⣿⣿⣿⣿⣽⡃⠌⠠⢁⠂⠌⡀⢂⡐⣀⠂⠄⢻⡏⣿⣽⣞⣷⣻⢾⡽⣯⣿⡽⣿⢾⣟⡾⣵⢪⡷⣷⠾⣶⢷⡾
⡿⣼⢳⢎⡱⢣⢞⡵⣮⣟⣯⢧⠻⣿⡽⣿⣳⣟⣿⣿⢠⡙⢆⡙⢦⠑⡌⢢⠉⢆⡘⢄⠣⣘⠢⡑⣯⣿⣻⢾⡽⣿⣟⠶⣁⢻⣿⣿⣿⣿⣿⣿⠇⡟⢣⠈⡐⠠⢈⠐⣈⠛⠭⡉⠏⡙⠺⡟⢿⣽⡾⣿⡽⣯⣟⡷⣿⣿⣻⢿⣯⣟⣧⠧⣿⣾⡿⣜⠧⢂
⡷⣭⣛⢎⡖⣹⢾⡽⣞⣿⣞⣯⢷⡹⣟⣯⣷⣞⣿⣷⢢⡙⢆⡙⢢⠑⡌⢢⠉⢆⡘⢄⠣⢄⠣⡘⡼⣿⠽⣯⢻⣿⣽⢣⡃⢾⣿⣿⣿⣿⣿⣟⣈⠧⡀⠡⢀⠁⠂⠔⡠⢉⠐⣀⣂⠄⠡⣟⢸⣹⢿⣿⣻⡷⣯⣟⣿⣿⣻⣿⣯⢿⣞⡯⢿⣽⡿⣜⡃⠆
⣻⢶⡙⡮⠜⣽⣫⢿⣟⣷⣻⣞⣯⢷⡹⣿⢾⡽⣿⣷⢢⡙⢆⡙⢦⠑⡌⢢⠉⢆⡘⢄⠣⢌⠢⢡⢹⣯⢻⡜⣯⣿⢯⡳⢌⣻⣿⣿⣿⣿⣿⠏⣽⣷⣧⠐⠠⢈⠐⡈⠰⣬⡷⢶⣮⣾⣥⣻⡸⢼⢺⣿⣯⣟⣷⣻⣿⣿⣿⣽⣿⣟⡾⣝⣻⢾⣟⡰⡁⠎
⣯⢞⡵⡹⣘⣧⣟⣿⣻⣞⣷⣻⣞⣯⢷⡘⢯⣟⣿⡷⢢⡙⢦⡙⢦⠘⡄⢣⠘⠤⡘⢄⠣⢌⠢⡁⢾⣜⣧⡻⣵⡿⣿⡱⢂⢽⣿⣿⣿⡧⢿⠂⣛⣿⣿⠆⡁⢂⠐⠄⠋⠔⡈⢲⣿⣿⣿⣿⣿⣿⣼⣿⣯⣿⣞⣿⢆⢹⣿⣟⣿⣾⣻⣟⡼⣻⣷⠰⡁⠎
⣯⢾⡱⢣⣜⡾⣽⡾⣟⣾⣳⣟⡾⣽⣻⢮⡱⣞⣿⡿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠒⡌⢢⠑⢮⡿⣞⡷⣹⣿⣻⢥⠃⢾⣿⣿⣿⣿⠹⡇⢸⣍⢻⡱⢀⠂⡘⠠⢁⠂⠄⣳⢻⡿⣿⢿⣿⠣⢼⣿⡿⣞⣯⡿⣌⢺⣿⣿⣿⡷⣿⡽⣼⣻⣧⢣⠑⡌
⣟⡮⣝⢣⠾⣽⡿⣽⣻⣞⡷⣯⣟⡷⣯⢿⡵⡜⣿⣿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠲⣌⢣⠉⡌⣉⠡⣉⠳⣉⠙⡊⢱⢈⣿⣿⣿⣿⡷⡈⢄⠓⡦⠃⠄⠂⠄⡁⠂⠌⠠⢙⢦⠹⡱⢚⠏⡰⣻⣿⣿⢿⣿⠗⡬⢻⣿⣿⣿⢿⣽⣟⢶⣻⣽⢂⠣⡐
⡿⡼⣡⢏⠿⣽⡿⣽⣳⢯⣟⡷⣯⢿⡽⣯⣟⡾⡜⣿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠒⡌⢦⠑⡌⢄⠣⢄⠳⢠⠙⡄⢣⠘⣼⣿⣿⣿⣿⠐⣌⠳⣄⠡⢈⠐⠠⢀⠡⢈⠐⡠⢌⠡⢁⠊⠴⣡⣿⣿⣿⣿⡿⡘⣜⣽⣿⣿⣿⣯⢿⣟⡎⢙⠣⡉⠖⡡
⣛⡵⣫⢞⣽⡿⣽⣳⢯⣟⡾⣽⢯⡿⣽⣳⢯⡿⣵⢎⠳⡘⢦⡙⢆⠘⡄⢣⠘⠤⡑⢌⠢⡙⢤⠃⡜⢠⠃⡌⢢⢁⠚⡄⢣⠘⡰⣿⣿⣿⣿⡌⠄⠡⢈⠐⠠⢈⠐⡀⠂⢌⠒⡡⢊⠐⠠⢉⡲⠝⣰⣿⢿⡽⣣⣵⣿⣿⣿⣿⣿⢾⣿⣻⠆⡡⢆⠡⡃⠔
⣯⢳⡝⣮⣿⣻⡽⡏⠿⣾⡽⣯⢿⣽⣳⢯⡿⣽⣻⢮⢇⡙⢦⡙⢆⠈⠄⡁⢊⠐⡁⢊⠐⡁⢂⠡⠈⠄⠡⢈⠐⡈⢂⠘⡀⢃⠰⣿⣿⣿⣿⣷⡈⠐⠠⢈⠐⡀⠂⠄⡁⢂⠐⡀⠂⠌⡐⠠⢁⢲⡿⢫⣿⣽⣿⣿⣿⣿⣿⣿⣿⢯⣿⣯⡇⡘⢄⠣⡘⠄
⢯⡳⡝⣾⡷⣿⣽⣃⠳⣌⢻⣽⡻⢎⡝⢪⣽⣳⢯⣟⣯⡜⢢⡙⢆⠙⢢⠙⢢⠙⡰⢉⠎⡱⢉⠎⡱⢉⠎⡡⢋⠜⡡⢊⡑⢊⠱⡟⣿⣿⣿⣿⣿⣆⡁⢂⠒⠄⡁⢂⠐⡀⠂⠄⡁⠂⠄⡁⢎⡝⢲⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⣿⡳⠄⠦⠰⠄⢆
⣧⢹⢼⣿⣻⢷⣯⣇⢣⠘⠦⡘⠥⢃⠌⡳⣾⣽⣻⣞⣷⣛⢦⢉⠆⡘⠤⡉⢆⠱⣀⠣⡘⢄⠣⡘⢄⠣⡘⣤⢣⣜⡤⢃⡜⢠⢃⡇⢻⣿⣿⣿⣿⣿⣷⣄⠈⡐⢀⠂⡐⠠⢁⡂⢤⢃⠞⣩⠒⣌⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⢯⣷⣟⡌⢢⠑⡌⢂
⢶⣩⣾⡿⣽⣻⢞⡓⢎⡑⢢⠑⡌⠢⣌⠱⣟⣾⣳⣟⡾⣽⢯⡆⢣⠘⠤⡑⢌⠒⡄⢣⠘⡄⢣⠘⡄⢳⡿⣝⣯⢻⣽⡷⡈⢆⢸⢃⢹⣿⣿⣿⣿⣿⣿⣿⣧⣴⣦⣶⣷⢉⠧⡘⢦⡉⠞⡤⢋⠴⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣯⣿⣾⣄⢣⠘⣄
⢲⣣⣿⡛⡥⢃⠎⡘⠤⡘⢄⠣⡘⠵⡠⢙⡘⢷⣻⢾⡽⣯⣟⡾⣄⠍⢢⠑⡌⠒⡌⢢⠑⡎⠐⢂⠐⢫⡽⣞⢮⣟⣾⡳⡍⢂⢾⠀⢪⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠆⡬⡑⢦⡙⡜⡰⣉⠖⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⣟⣷⣿⡞⣬⣳⢮
⢣⣟⣷⣿⣶⡿⣾⣴⣧⠒⠆⢦⣍⣦⣑⣂⡜⣨⣛⣯⣟⡷⣯⣟⠞⢎⠄⠣⢌⠱⡈⢆⠱⡸⢤⠈⡄⣹⢞⣭⠷⣞⣷⡟⡴⣉⡎⠄⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢇⠚⡰⣉⠦⡱⢌⡱⢌⡚⡔⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣯⣿⢿⡼⣯⣷
⣜⣾⢿⣳⢯⣟⣷⣻⣧⠩⣘⢯⡿⣽⣻⢿⣽⣻⡽⣾⣽⣫⠷⣉⠎⠸⡌⡱⢈⠆⡱⢈⠦⡑⢆⠱⡀⠽⠾⠭⠿⣽⣞⡿⢰⢱⡋⠔⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡟⠌⡬⠱⢌⠲⣑⢊⡔⢣⠜⡈⠤⢈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣾⢣⠙⠤⢉
⣼⣻⡿⣽⣻⣞⣷⣻⣧⠃⡜⣯⣟⡷⣯⣟⣾⣳⣟⡷⣯⢋⠲⡡⢎⠱⢸⡐⡡⢊⡔⢣⠜⡰⢈⠆⡱⢊⠧⡙⠶⢡⠒⡌⢣⡟⢤⣻⣿⣿⣿⣿⣿⣿⣟⣻⢋⢵⠲⣉⠖⣡⢋⡌⠳⣌⠲⠘⡁⢢⠘⠄⢊⠐⠠⢀⠉⡉⢉⠛⢿⣿⣿⣿⣿⣻⡆⣍⢢⣁
⡶⣿⣻⢷⣻⣞⣷⣻⣧⣧⣟⡷⣯⣟⣷⣻⣞⡷⣯⠟⣀⢊⡑⣈⢂⡑⢢⢱⡐⡡⣘⢂⡚⣐⢃⡚⡐⢊⠒⡐⣈⢂⡑⣈⡽⣨⣿⣿⣿⣿⣿⣿⣿⡟⢦⢣⢋⠴⡡⢌⡜⡰⠂⡌⠱⡀⢆⠑⡈⠄⡈⠐⠠⢈⠐⡀⢂⠐⠠⠈⠄⡈⢿⣿⣿⡿⡥⢆⠤⡀
⡽⣟⣯⣟⣷⣻⣞⣷⣻⢾⣭⣟⣷⣻⣞⡷⣯⡟⢣⢚⡤⠳⣌⡱⢎⡱⢣⢎⡴⢱⠌⡶⣑⢎⠶⡱⣍⢫⡍⢳⡜⣢⠳⣜⣷⣿⣿⣿⣿⣿⣿⣿⣿⡙⣎⢧⢋⠞⡱⠊⠔⡡⠁⠄⠡⡐⢂⠐⡀⠂⠄⡁⠂⠄⢂⠐⠠⠈⠄⡁⢂⠐⡀⢻⣿⣿⣿⢬⢤⡡
⣸⣿⣻⣞⣷⣻⣞⡷⣯⣟⡾⣽⣞⡷⣯⣟⠷⣉⠖⣣⠜⡳⢤⡙⣬⢃⡏⢶⡘⡆⢹⡒⠭⢎⣣⠳⣌⢣⡚⢥⢎⡱⣹⣾⣿⣿⣿⣿⣿⣿⣿⡿⢣⡑⢎⠦⣉⠎⠡⢈⠐⠠⠁⠌⡀⠇⡀⠂⠄⡁⠂⠄⠡⠈⠄⡈⠄⡁⢂⠐⡀⢂⠐⠨⣿⣿⣿⡞⢦⡹
⢾⣻⣷⣻⣞⡷⣯⣟⡷⣯⣟⡷⣯⣟⡷⢩⡒⣍⢚⡤⢋⡴⢣⡱⢆⡫⡜⢦⡹⣼⠀⣏⢧⡹⣐⢫⠜⢦⡙⡖⢪⢵⣿⣿⣿⣿⣿⣿⣿⣿⠏⡔⢣⡙⢌⠲⢁⠊⡐⠠⠈⠄⡁⠂⠄⠱⡀⢁⠂⢄⠡⠈⠄⡁⢂⠐⠠⠐⡀⢂⠐⠠⢈⠐⣿⣿⣿⣿⢣⡜
⣏⢿⣞⡷⣯⣟⡷⣯⣟⡷⣯⣟⣷⠫⣔⢣⠕⣎⠲⣼⣱⣜⣣⣕⣫⡖⣭⢃⡔⣠⢆⣈⠁⠓⡙⠮⣚⣥⠳⣜⢣⣿⣿⣿⣿⣿⣿⣿⠟⡡⠚⠌⠡⠈⠄⡂⠄⠂⠄⠡⢈⠐⡈⠔⡈⠄⢣⠀⠌⢢⠀⡁⢂⠐⠠⠈⠄⠡⠐⠠⢈⠐⠠⢈⣿⣿⣿⣯⡗⡸
⣟⣮⢻⣽⣳⢯⣟⡷⣯⣟⣷⣻⣇⠳⣌⠮⡜⣌⠳⣽⣻⣞⣯⣟⣷⢻⣽⣻⣞⣷⠋⠄⢋⠑⠒⠔⠤⣈⠙⡙⠯⢿⣿⣿⣿⣿⠟⡁⠊⠄⡉⠄⠡⢈⠢⠁⠌⡑⢈⠐⡀⢂⠐⠠⡐⠈⠄⡙⢌⣳⠀⡐⠠⠈⠄⠡⠈⠄⡁⠂⠄⡈⠐⢨⣿⣿⣿⣯⣗⡱
⡿⣮⢷⣭⣻⣟⡾⣽⣳⣿⣾⣿⡇⣹⠰⣓⠼⣌⠳⡽⢶⡹⢾⣿⣿⣿⣿⣷⣿⣾⣏⠾⡴⣌⡔⣈⠐⡀⢂⠐⡀⠂⠌⢻⡿⢁⠂⠄⡁⢂⠐⡈⠐⡀⢂⠁⠆⡐⢀⠂⡐⠠⢈⠐⠠⢁⠂⡐⠌⠒⠤⣀⠡⠈⠄⠡⢈⠐⠠⢁⠂⠄⡁⢺⣿⣿⣿⣷⣯⢶
⣹⢯⣟⣾⣳⢯⣟⡷⣯⢷⣿⣿⡇⢲⡙⣤⠛⡴⢩⡟⣭⢻⣽⡿⣿⣻⢿⣟⣯⡟⠠⠉⠌⡉⠑⠠⢁⠐⡀⠂⠄⠡⠈⠄⡐⢄⠈⡐⢀⢂⠐⠠⢁⠐⠠⢈⠐⠠⢂⠐⠠⢁⠂⠌⡐⢀⢂⠜⠠⠁⠆⠠⢉⠒⢌⡐⠠⢈⠐⠠⢈⠐⡀⢿⣿⣿⣿⣷⣿⣻
⢮⣛⢾⣳⣯⢿⡽⣿⣿⣿⢾⣿⡇⢇⡳⢔⡫⡜⢥⣻⡜⣣⢾⣿⣳⢿⣻⣯⣿⢿⣥⢫⣖⣤⠃⠆⠄⠂⠄⠡⠈⠄⡁⢂⠐⡈⢆⠐⠠⠈⠄⡁⠂⠌⡐⠠⢈⠐⠠⢈⠐⠠⢈⠐⡀⢂⡜⠠⢁⠘⡄⢁⠂⠌⠠⢈⠑⢂⠊⠴⠠⢂⠐⢻⣿⣿⣿⣿⣿⣿
⣏⢯⢳⡝⣾⣯⢿⣽⣿⡿⣯⣿⡇⢮⠱⢎⠵⢪⢱⡳⡜⡥⢿⣯⣿⣿⣯⡷⣿⣻⣷⠃⠌⠠⢉⠐⡈⠐⡈⠄⡁⢂⠐⡀⢂⠐⡈⢸⣗⡃⢆⠠⡁⠆⠠⢁⠂⡌⠐⠠⢈⠐⡀⢂⠰⢣⠜⡁⢢⠑⠄⠂⠌⠠⢁⠂⠌⠠⠈⠄⡁⠂⢌⣾⣿⣿⣿⣿⣿⣾
⣜⣎⢧⣞⣽⣞⡟⣾⣽⣻⣽⣿⡎⢲⡙⣬⠓⣭⠲⡽⣌⢳⣻⣟⣾⡿⣯⣟⡷⣿⡏⠜⣜⠳⣎⠶⣠⢃⡐⠠⠐⡀⢂⠐⡀⢂⠐⢸⠼⡍⠊⢖⡰⢌⡒⢌⡒⠤⢁⠂⠄⢂⠰⣈⢣⢃⠎⡠⢃⠌⠠⠁⠌⡐⠠⠈⠄⠡⢈⠐⠠⢁⣾⣿⣿⣿⣿⣿⣯⣟
⡷⣞⡷⣾⣻⢎⣿⣳⢿⣻⣾⣿⡇⡣⢕⢆⡛⡔⢫⠷⣌⠲⣽⣞⣷⣿⣳⣯⣟⡷⣯⡘⢤⠫⣔⢣⡕⢫⠔⣣⡑⣄⢂⠐⡀⠂⠌⣼⣏⠃⠌⠠⠙⡎⠸⢆⡹⢀⠣⣈⠰⣌⠲⡡⢎⡜⢠⡑⠠⠈⠄⡁⠂⠄⠡⠈⠄⡁⠂⠌⡐⣸⣿⣿⣿⣟⣿⣿⡷⣯
⢿⣽⣻⢷⣯⣟⡾⣽⢯⣿⣿⣿⡇⡹⡌⠮⢴⢩⢣⡟⡤⢛⣼⣟⡾⣿⣟⣷⢯⣿⡽⣟⣧⡳⢌⠣⡜⣡⠚⡤⢓⡌⣗⠺⣤⣣⣜⡷⡎⠐⡈⠄⣑⠂⡁⢂⠙⠪⡱⣌⠳⣌⢣⡑⢎⡜⠢⠐⠡⢈⠐⠠⠁⠌⠠⢁⠂⠄⡁⠂⢴⣿⣿⣿⢷⣻⣿⣿⣟⢷
⠳⡞⢿⢿⡾⣽⣻⣽⣻⢿⣿⣿⡇⢵⢊⡝⣆⢋⠶⣹⢆⡙⣾⣯⣟⣷⣻⣞⣯⡷⣿⣻⢾⡝⣯⢖⡱⢢⡙⡔⢣⠜⣬⢓⠦⣿⣿⣳⢉⢆⡐⢸⡰⢀⠐⠠⢈⠐⠠⢈⠑⠌⠓⡘⠃⠜⡡⢉⡐⠠⠈⠄⠡⢈⠐⠠⢈⠐⠠⣉⠞⠛⠿⣿⢯⣷⣻⡽⣮⣳
⠦⣘⡜⣮⣿⣳⢯⡶⣿⡿⣿⣿⡝⡢⢏⡴⢪⢍⠞⣵⢊⠴⣹⣿⢾⣳⣟⣾⣳⣟⣷⣻⢷⣻⣞⣯⡗⢣⠜⣌⢣⢚⡴⣋⢾⣿⣷⢯⡜⢢⡑⢣⠇⠠⢈⠐⠠⢈⠐⠠⠈⠄⡑⠤⣁⠂⠄⡑⠌⡓⡌⠠⢁⠂⠌⡐⠠⠈⢄⢃⠺⣟⢶⣌⢻⣯⣷⣿⣷⢯
⣿⣳⢿⣯⣷⣯⡿⣽⢶⣻⢿⣿⡧⣙⢎⡴⢋⡜⢮⡝⡎⡜⣹⡿⢯⣷⢯⣟⣿⡾⣯⣟⣯⢷⣻⡽⢌⡣⠞⡤⢃⠎⢶⡙⣮⠙⣎⢣⠚⣥⢊⠵⡈⠐⠠⢈⠐⠠⠈⠄⡁⢂⠐⠠⢀⠣⠐⡀⢂⡐⢡⠂⠄⡈⠐⠠⠁⠌⡜⣼⡆⢹⡆⢿⣆⢹⣿⡿⣝⡫
⣫⣽⡿⣾⣟⣾⣿⡿⣿⣯⣟⣿⡧⢍⠶⣘⢇⡺⣡⢟⡴⣉⢿⣽⣻⡾⣟⡿⣿⣿⣳⣯⣟⡿⢯⠓⣌⢳⡹⡰⣉⠞⡦⣙⠶⣉⢆⢣⡙⢤⢋⠞⠠⢁⠂⠄⡈⠄⡁⢂⠐⠠⢈⠐⡀⢂⠡⠐⠠⠘⠤⡉⢆⠠⢁⠂⡁⡾⢡⣿⣏⡄⢣⢚⣿⡄⣿⣟⣧⢿
⣽⣷⣻⢧⣿⣻⡽⣷⣣⣿⣞⣿⣇⢫⡜⡱⢎⡵⢊⡿⡰⢩⢾⡿⣽⡿⣽⡽⣳⢯⣿⡽⣿⡞⡅⢣⢌⢣⢳⡱⣌⠚⡴⣉⠾⣑⠎⢦⡙⢦⡉⢎⠐⠠⢈⠐⡀⢂⠐⠠⢈⠐⡀⢂⠐⡀⢂⠁⢂⠁⢢⠑⠌⠒⡀⢂⣼⠃⣿⢼⡷⢸⡀⢎⡿⠄⣻⣟⡾⣟
⣿⢾⣯⣟⣾⣽⣿⣳⣟⡾⣽⣾⡇⣇⢚⠵⣩⠖⡭⣞⠥⣋⢾⣟⡿⣽⣷⣻⣽⣻⣾⣟⣿⣳⠈⠆⡌⢂⠣⢱⣎⠓⡰⢡⢏⡇⡚⢤⡙⠦⡙⢆⠈⡐⢀⠂⡐⠠⢈⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡈⠄⠩⢀⠡⠐⣰⣿⠀⣿⢺⣿⠰⡇⠌⡟⢰⡿⣽⣻⡽
⣿⣻⢷⣻⢯⡿⣟⡿⣿⣿⣿⣿⡗⡬⢍⡞⣡⢞⡱⣏⡖⣡⢿⣻⡼⢧⣛⢿⣻⢿⣽⣾⢯⣿⣷⣌⡰⢁⠎⡔⢎⠰⢡⢋⢾⠰⣉⠦⡙⢆⠱⣂⠐⡀⢂⠐⠠⢁⠂⡐⢀⠂⡐⢀⠂⠌⠠⢁⠂⡐⢈⠐⡀⢂⢡⣿⣿⣧⠘⢯⣿⡐⣏⠰⢰⡿⣹⣗⢯⣟
⣿⣻⢯⡿⣿⡽⣞⡽⣯⣿⢿⣿⡧⢱⢎⡼⠱⢎⡱⣏⠖⣡⢾⡿⣽⣏⡟⡾⢭⣛⣾⣻⣿⣾⣳⣟⡿⣷⠎⡜⢢⢁⢃⠎⣇⠳⣌⠲⣉⢆⠳⠌⡆⠐⠠⢈⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡁⢂⠐⡀⢂⡐⢰⠼⣿⢿⣿⡿⣟⣦⢤⡥⣔⢻⡄⣿⡳⢎⡳⣮
⣾⡽⣯⣟⣷⣻⣽⣻⣽⣯⣿⣿⣇⠓⡮⢜⡹⢬⠱⣏⡳⢌⢾⡿⣷⢯⡿⣽⣳⡽⡶⢯⣻⢿⣿⣯⡟⢞⡱⢌⠡⢎⠢⣙⢆⠳⣌⠳⡌⠦⡉⠖⣨⢃⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡁⢂⠐⡀⢂⠄⣣⢜⠣⠒⡈⢿⣟⣿⣻⣽⣎⣷⡩⣾⠆⣸⣿⣭⡷⣟
⠥⣫⢕⡛⡞⡽⢳⠟⡷⢯⢾⣿⡧⢹⡘⣥⢋⠶⣙⢮⡓⡜⣺⢿⣽⣻⡽⣷⢯⣷⣟⣯⣟⣯⢿⣽⣚⠆⡘⢄⠣⢌⠢⡍⢎⡱⢌⠳⣌⢣⡙⣌⠲⡌⢆⠐⡀⢂⠐⠠⠈⠄⡁⢂⠰⡀⢎⠴⡡⢎⡱⢎⡑⠠⠐⡈⢿⣿⣟⡷⣯⢞⣷⣹⠇⣼⣷⣯⢿⣽
⠴⣡⢎⡴⣡⠜⣡⢋⡜⣡⠛⠞⢧⠣⡝⡆⢏⡎⡱⢏⡳⡘⢽⠻⢾⢳⢿⣽⣻⢷⣻⣟⣾⡿⣯⣿⢷⣮⣴⣎⣔⣈⠖⡩⢆⡱⢊⠵⣈⠦⡱⢌⠳⡌⡘⡄⠐⠠⠈⠤⣑⢤⠱⣌⠲⡙⣌⠲⡑⢎⠔⡡⠄⡁⢂⠐⡈⢿⣾⣽⣳⢯⣷⢯⡀⣿⣳⣯⢿⣽
⡜⣡⠞⣰⠣⣝⢢⠳⣘⢆⠻⡜⢦⡛⡼⣘⢣⡜⣱⡉⢖⡩⢆⠫⡜⣌⠒⠦⡙⢎⠵⣩⢳⠻⣝⣫⢟⡻⣟⠿⡷⡌⢧⡑⢎⠴⣉⠖⡡⢎⡱⢊⠵⣘⠴⢁⡌⠴⣉⠖⡡⢎⡱⢌⢣⠱⣌⠣⠁⠌⠂⠄⢣⠐⡀⢂⠐⡈⢳⣯⣟⡿⣞⡿⣽⣻⡽⣯⢿⣹
**/